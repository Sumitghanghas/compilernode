app.post('/run', async (req, res) => {
  const { language, code, input } = req.body;
  const unique = Date.now();
  let baseFilename = `code-${unique}`;
  const fileBase = path.join(Temp, baseFilename);
  let sourceFile, runCmd, compileCmd = null, cleanup = [];
  
  try {
    switch (language) {
      case 'c':
        sourceFile = `${fileBase}.c`;
        fs.writeFileSync(sourceFile, code);
        compileCmd = ['gcc', sourceFile, '-o', `${fileBase}.out`];
        runCmd = [`${fileBase}.out`];
        cleanup.push(sourceFile, `${fileBase}.out`);
        break;
      case 'cpp':
        sourceFile = `${fileBase}.cpp`;
        fs.writeFileSync(sourceFile, code);
        compileCmd = ['g++', sourceFile, '-o', `${fileBase}.out`];
        runCmd = [`${fileBase}.out`];
        cleanup.push(sourceFile, `${fileBase}.out`);
        break;
      case 'java':
        sourceFile = path.join(Temp, 'Main.java');
        fs.writeFileSync(sourceFile, code.replace(/public\s+class\s+\w+/, 'public class Main'));
        compileCmd = ['javac', sourceFile];
        runCmd = ['java', '-cp', Temp, 'Main'];
        cleanup.push(sourceFile, path.join(Temp, 'Main.class'));
        break;
      case 'javascript':
        sourceFile = `${fileBase}.js`;
        fs.writeFileSync(sourceFile, code);
        runCmd = ['node', sourceFile];
        cleanup.push(sourceFile);
        break;
      default:
        return res.status(400).json({ error: 'Unsupported language' });
    }
    
    if (compileCmd) {
      await runCommand(compileCmd[0], compileCmd.slice(1));
    }
    
    const output = await runProgramSync(runCmd[0], runCmd.slice(1), input || '');
    cleanupFiles(cleanup);
    res.json({ output });
  } catch (err) {
    cleanupFiles(cleanup);
    res.status(400).json({ error: err.toString() });
  }
});

function runProgramSync(command, args, input) {
  return new Promise((resolve, reject) => {
    const proc = spawn(command, args);
    let stdout = '', stderr = '';
    proc.stdout.on('data', data => { stdout += data.toString(); });
    proc.stderr.on('data', data => { stderr += data.toString(); });
   
    if (input) { proc.stdin.write(input); }
    proc.stdin.end();
    proc.on('close', code => {
      if (code !== 0) reject(stderr || `Exited with code ${code}`);
      else resolve(stdout);
    });
    proc.on('error', err => reject(err.message));
  });
}